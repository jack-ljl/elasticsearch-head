<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<!-- The SQL in these maps files has purposely been typed with more verbosity than is actually required.
 For example, many of the selects could have just used SELECT * FROM... instead of listing all of the columns.
 This is to demonstrate that even complex SQL can be handled and coded and formatted the way SQL was meant
 to be (i.e. not a bunch of concatenated strings in a Java class). -->

<sqlMap namespace="Sequence">

  <typeAlias alias="sequence" type="com.excellence.platform.missive.domain.Sequence"/>

  <resultMap id="counterResult" class="sequence">
    <result property="name" column="NAME"/>
    <result property="nextId" column="counter"/>
  </resultMap>
  
  <parameterMap class="map" id="swapParameters">   
    <parameter property="tablename"  javaType="java.lang.String" jdbcType="VARCHAR"  mode="IN"/>   
    <parameter property="keyvalue"  javaType="java.lang.Integer" jdbcType="INTEGER"  mode="OUT"/>   
  </parameterMap>

  <select id="getSequence" resultMap="counterResult" parameterClass="sequence">
    select name, counter from counter where NAME = #name# 
  </select>

  <insert id="insertSequence" parameterClass="string">
  INSERT INTO counter (NAME,COUNTER)
  VALUES (#value#,0) 
  </insert>
  
   <update id="updateSequence" parameterClass="sequence">
    update counter set COUNTER = #nextId# where NAME = #name#
  </update>
  <procedure id="getPkValue" parameterMap="swapParameters">
  	{call MISSIVEKEYGEN(?,?)}
  </procedure> 
</sqlMap>
